{"version":3,"sources":["actions/chats.ts","actions/profile.ts","actions/messages.ts","img/leo.jpg","img/chat.png","components/Header/Header.tsx","containers/HeaderContainer.tsx","components/Footer/Footer.tsx","pages/Home.tsx","img/about.png","components/ChatForm/ChatForm.tsx","components/Message/Message.tsx","components/MessagesList/MessagesList.tsx","components/MessageForm/MessageForm.tsx","components/ChatList/ChatList.tsx","components/ChatsLoading/ChatsLoading.tsx","components/Messenger/Messenger.tsx","components/ProfileCard/ProfileCard.tsx","containers/ProfileCardContainer.tsx","ts/routes.ts","pages/About.tsx","containers/MessengerContainer.tsx","pages/Profile.tsx","pages/Error.tsx","reducers/chats.ts","reducers/profile.ts","reducers/messages.ts","middlewares/newMessageAlert.ts","middlewares/bot.ts","ts/store.ts","reducers/index.ts","ts/app.tsx"],"names":["ChatsActionTypes","api","ProfileActionTypes","chatsLoadAction","createAction","endpoint","method","headers","types","CHATS_LOAD_REQUEST","CHATS_LOAD_SUCCESS","CHATS_LOAD_FAILURE","MessageActionTypes","profileInfoAction","PROFILE_INFO_REQUEST","PROFILE_INFO_SUCCESS","PROFILE_INFO_FAILURE","Header","props","profile","isError","isLoading","className","List","ListItem","to","ListItemText","src","pic","alt","primary","name","Avatar","userPhoto","HeaderContainer","dispatch","useDispatch","useSelector","state","entries","loading","error","useEffect","Footer","Home","ChatForm","onSend","useState","title","dataForm","setDataForm","onSubmitForm","trim","length","alert","TextField","label","type","value","onChange","event","target","onKeyDown","keyCode","ctrlKey","Fab","variant","color","onClick","Message","text","author","handleDeleteMessage","message","classes","classNames","id","MessagesList","items","map","item","MessageForm","handleInputChange","handleMessageSend","keydownHandler","multiline","autoFocus","Send","ChatList","handleDeleteChat","alignItems","fire","ListItemAvatar","substr","secondary","Fragment","messages","Divider","component","ChatsLoading","Messenger","handleNewChat","chats","handleChatsReload","chatList","Array","from","chatsMessageSendAction","body","JSON","stringify","CHATS_MESSAGE_SEND_REQUEST","CHATS_MESSAGE_SEND_SUCCESS","CHATS_MESSAGE_SEND_FAILURE","useStyles","makeStyles","root","minWidth","margin","bullet","display","transform","fontSize","pos","marginBottom","ProfileCard","handleProfileReload","Card","CardContent","Typography","gutterBottom","nickname","tel","lastVisit","CardActions","Button","size","ProfileCardContainer","routes","path","exact","useParams","MESSAGES_LOAD_REQUEST","MESSAGES_LOAD_SUCCESS","MESSAGES_LOAD_FAILURE","DELETE_CHAT_REQUEST","DELETE_CHAT_SUCCESS","DELETE_CHAT_FAILURE","deleteChatAction","push","nanoid","chatId","chat","lastChatId","Object","keys","ADD_CHAT_REQUEST","ADD_CHAT_SUCCESS","ADD_CHAT_FAILURE","addChatAction","DELETE_MESSAGE_REQUEST","DELETE_MESSAGE_SUCCESS","DELETE_MESSAGE_FAILURE","deleteMessageAction","initialState","chatsReducer","action","payload","CHAT_FIRE","update","$set","CHAT_UNFIRE","profileReducer","messagesReducer","newMessageAlert","store","next","LOCATION_CHANGE","thisState","getState","setTimeout","newState","i","timer","botMiddware","clearTimeout","botAnswer","index","min","max","Math","floor","random","history","createBrowserHistory","persistConfig","key","storage","blacklist","createStore","persistReducer","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","apiMiddleware","logger","persistor","persistStore","initStore","ReactDom","render","route","document","getElementById"],"mappings":"uSAKYA,E,8EAFCC,EAAM,yB,SAEPD,K,oCAAAA,E,oCAAAA,E,oCAAAA,E,sBAAAA,E,0BAAAA,E,0CAAAA,E,0CAAAA,E,0CAAAA,E,wCAAAA,E,wCAAAA,E,yCAAAA,M,KAmCL,ICrCKE,EDuECC,EAAkB,kBAAMC,uBAAa,CAC9CC,SAAS,GAAD,OAAKJ,EAAL,0BACRK,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHR,EAAiBS,mBACjBT,EAAiBU,mBACjBV,EAAiBW,wB,SC9EbT,K,4CAAAA,E,4CAAAA,E,6CAAAA,M,KAML,ICLKU,EDKCC,EAAoB,kBAAMT,uBAAa,CAChDC,SAAS,GAAD,OAAKJ,EAAL,eACRK,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHN,EAAmBY,qBACnBZ,EAAmBa,qBACnBb,EAAmBc,yB,4CEhBZ,MAA0B,gCCA1B,MAA0B,iCCO5BC,G,OAA+B,SAACC,GAAW,IAC5CC,EAAgCD,EAAhCC,QAASC,EAAuBF,EAAvBE,QAASC,EAAcH,EAAdG,UAE1B,OACI,qBAAKC,UAAU,SAAf,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,eAAC,IAAD,CAAMF,UAAU,WAAWG,GAAG,QAA9B,UAAsC,cAACC,EAAA,EAAD,IAAgB,qBAAKJ,UAAU,WAAWK,IAAKC,EAAKC,IAAI,cAElG,cAACL,EAAA,EAAD,UACI,cAAC,IAAD,CAAMF,UAAU,WAAWG,GAAG,aAA9B,SAA2C,cAACC,EAAA,EAAD,CAAcI,QAAQ,iCAErE,cAACN,EAAA,EAAD,UACI,cAAC,IAAD,CAAMF,UAAU,WAAWG,GAAG,SAA9B,SAAuC,cAACC,EAAA,EAAD,CAAcI,QAAQ,kCAEjE,cAACN,EAAA,EAAD,UACI,cAAC,IAAD,CAAMF,UAAU,WAAWG,GAAG,gBAA9B,SAA8C,cAACC,EAAA,EAAD,CAAcI,QAAQ,2GAExE,cAACN,EAAA,EAAD,UACI,eAAC,IAAD,CAAMF,UAAU,WAAWG,GAAG,WAA9B,UAAyC,cAACC,EAAA,EAAD,CAAcI,QAAQ,+CAA/D,SAEJ,eAACN,EAAA,EAAD,WACKJ,GAAW,cAACM,EAAA,EAAD,CAAcI,QAAQ,qIACjCT,EAAY,cAACK,EAAA,EAAD,CAAcI,QAAQ,wDAC/B,eAAC,IAAD,CAAMR,UAAU,qBAAqBG,GAAG,WAAxC,cAAoD,cAACC,EAAA,EAAD,CAAcI,QAASX,EAAQY,OACjF,cAACC,EAAA,EAAD,CAAQH,IAAI,MAAMF,IAAKP,EAAU,GAAKa,EACpCX,UAAU,iBAFd,iBC1BXY,EAAgC,WACzC,IAAMC,EAAWC,cACXjB,EAAUkB,aAAY,SAACC,GAAD,OAA6BA,EAAMnB,QAAQoB,WAFxB,EAGlBF,aAAY,SAACC,GAAD,MAA6B,CAACA,EAAMnB,QAAQqB,QAASF,EAAMnB,QAAQsB,UAH7D,mBAGxCpB,EAHwC,KAG7BD,EAH6B,KAW/C,OANAsB,qBAAU,WACc,MAAhBvB,EAAQY,MACRI,EAAStB,OAEd,CAACsB,EAAUhB,EAAQY,OAEf,cAAC,EAAD,CAAQV,UAAWA,EAAWD,QAASA,EAASD,QAASA,KCbvDwB,G,OAAuB,WAChC,OACI,qBAAKrB,UAAU,SAAf,SACI,mBAAGA,UAAU,cAAb,2C,iBCDCsB,EAAqB,WAC9B,OAAO,qCACH,cAAC,EAAD,IACA,sBAAKtB,UAAU,kBAAf,UACI,oBAAIA,UAAU,cAAd,yGACA,mBAAGA,UAAU,aAAb,mKACA,cAAC,IAAD,CAAmBA,UAAU,iBAEjC,cAAC,EAAD,QCbO,MAA0B,kC,8FCI5BuB,EAAmC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAC5BC,mBAAS,CACrCC,MAAO,KAFiD,mBACrDC,EADqD,KAC3CC,EAD2C,KAYtDC,EAAe,WAAa,IACtBH,EAAUC,EAAVD,MAEHA,GAAiC,IAAxBA,EAAMI,OAAOC,QAI3BP,EAAO,CAAEE,UACTE,EAAY,2BAAKD,GAAN,IAAgBD,MAAO,OAJ9BM,MAAM,yHAYd,OACI,sBAAKhC,UAAU,eAAf,UACI,cAACiC,EAAA,EAAD,CACIC,MAAM,uHACNzB,KAAK,QACL0B,KAAK,OACLC,MAAOT,EAASD,MAChBW,SA9BiB,SAACC,GAC1BV,EAAY,2BACLD,GADI,kBAENW,EAAMC,OAAO9B,KAAO6B,EAAMC,OAAOH,UA4B9BI,UAdW,SAACF,GACE,KAAlBA,EAAMG,SAAkBH,EAAMI,SAC9Bb,OAcA,cAACc,EAAA,EAAD,CACIC,QAAQ,QACRC,MAAM,UACNC,QAASjB,EAHb,SAKI,cAAC,IAAD,U,2CC1CHkB,EAAiC,SAACnD,GAAW,IAC9CoD,EAA+CpD,EAA/CoD,KAAMC,EAAyCrD,EAAzCqD,OAAQC,EAAiCtD,EAAjCsD,oBAAqBC,EAAYvD,EAAZuD,QACrCC,EAAkBC,IAAW,UAAW,CAC1C,iBAA6B,QAAXJ,EAClB,cAA0B,QAAXA,IAGnB,OAAO,sBAAKjD,UAAWoD,EAAhB,UACFJ,EADE,MACM,mBAAGhD,UAAU,iBAAb,SAA+BiD,IACxC,cAAC,IAAD,CAA2BH,QAAS,kBAAMI,EAAoBC,EAAQG,KAAMtD,UAAU,uBCXjFuD,EAA2C,SAAC3D,GAAW,IACxD4D,EAA+B5D,EAA/B4D,MAAON,EAAwBtD,EAAxBsD,oBACf,OAAO,mCAAGM,EAAMC,KAAI,SAACC,GAAD,OAAW,cAAC,EAAD,CAASP,QAASO,EAAMR,oBAAqBA,EAAqBF,KAAMU,EAAKV,KAAMC,OAAQS,EAAKT,QAAaS,EAAKJ,U,0BCCxIK,I,OAAyC,SAAC,GAAgB,IAAdnC,EAAa,EAAbA,OAAa,EAClCC,mBAAS,CACrCuB,KAAM,GACNC,OAAQ,KAHsD,mBAC3DtB,EAD2D,KACjDC,EADiD,KAK5DgC,EAAoB,SAACtB,GACvBV,EAAY,2BACLD,GADI,kBAENW,EAAMC,OAAO9B,KAAO6B,EAAMC,OAAOH,UAIpCyB,EAAoB,WAAa,IAC3Bb,EAAiBrB,EAAjBqB,KAAMC,EAAWtB,EAAXsB,OAETD,GAA+B,IAAvBA,EAAKlB,OAAOC,OAIpBkB,GAILzB,EAAO,CAAEyB,SAAQD,SACjBpB,EAAY,2BAAKD,GAAN,IAAgBqB,KAAM,OAJ7BhB,MAAM,2IAJNA,MAAM,qIAWR8B,EAAiB,SAACxB,GACE,KAAlBA,EAAMG,SAAkBH,EAAMI,SAC9BmB,KAIR,OACI,sBAAK7D,UAAU,cAAf,UACI,cAAC,IAAD,CAAYA,UAAU,oBACtB,cAACiC,EAAA,EAAD,CACIC,MAAM,qGACNzB,KAAK,SACL0B,KAAK,OACLC,MAAOT,EAASsB,OAChBZ,SAAUuB,EACVpB,UAAWsB,IAEf,cAAC7B,EAAA,EAAD,CACIC,MAAM,mIACNzB,KAAK,OACL2B,MAAOT,EAASqB,KAChBX,SAAUuB,EACVpB,UAAWsB,EACXC,WAAS,EACTC,WAAS,IAEb,cAACrB,EAAA,EAAD,CACIC,QAAQ,QACRC,MAAM,UACNC,QAASe,EAHb,SAKI,cAACI,EAAA,EAAD,W,oBCvDHC,GAAmC,SAACtE,GAAW,IAChD4D,EAA4B5D,EAA5B4D,MAAOW,EAAqBvE,EAArBuE,iBAEf,OAAO,mCACFX,EAAMC,KAAI,SAACC,GAAD,OACP,eAACzD,EAAA,EAAD,CAAoBD,UAAU,YAA9B,UACI,eAACE,EAAA,EAAD,CAAUkE,WAAW,aAAapE,UAAW0D,EAAKW,KAAO,cAAgB,GAAzE,UACI,cAACC,GAAA,EAAD,UACI,eAAC5D,EAAA,EAAD,CAAQH,IAAI,SAAZ,UACKmD,EAAKhC,MAAM6C,OAAO,EAAG,GAD1B,SAGJ,cAAC,IAAD,CAAMvE,UAAU,WAAWG,GAAE,iBAAYuD,EAAKJ,IAA9C,SACI,cAAClD,EAAA,EAAD,CACII,QAASkD,EAAKhC,MACd8C,UACI,cAAC,IAAMC,SAAP,UACKf,EAAKgB,SAAShB,EAAKgB,SAAS3C,OAAS,IAAM2B,EAAKgB,SAAShB,EAAKgB,SAAS3C,OAAS,GAAGiB,WAKpG,qBAAKhD,UAAU,cAAc8C,QAAS,kBAAMqB,EAAiBT,EAAKJ,KAAlE,SACI,cAAC,IAAD,CAA2BtD,UAAU,0BAG7C,cAAC2E,GAAA,EAAD,CAAS/B,QAAQ,QAAQgC,UAAU,SApB5BlB,EAAKJ,UCTfuB,I,OAA6B,WACtC,OAAO,qCACH,cAAE,EAAF,IACA,qBAAK7E,UAAU,oBAAf,SACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,wCAGvB,cAAC,EAAD,SCLK8E,I,OAAqC,SAAClF,GAAW,IAClD8E,EAAoI9E,EAApI8E,SAAUb,EAA0HjE,EAA1HiE,kBAAmBkB,EAAuGnF,EAAvGmF,cAAeC,EAAwFpF,EAAxFoF,MAAOb,EAAiFvE,EAAjFuE,iBAAkBjB,EAA+DtD,EAA/DsD,oBAAqBnD,EAA0CH,EAA1CG,UAAWD,EAA+BF,EAA/BE,QAASmF,EAAsBrF,EAAtBqF,kBAChHC,EAAuBC,MAAMC,KAAKJ,GAExC,OAAIlF,EACQ,qCACJ,cAAC,EAAD,IACA,qBAAKE,UAAU,gBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,CAAcA,UAAU,eAD5B,2FAGA,wBAAQ8C,QAASmC,EAAjB,4FAGJ,cAAC,EAAD,OAGJlF,EACQ,cAAC,GAAD,IAGJ,qCACJ,cAAC,EAAD,IACA,sBAAKC,UAAU,OAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,QAAf,SACKkF,EAAW,cAAC,GAAD,CAAUf,iBAAkBA,EAAkBX,MAAO0B,IAAe,6CAEpF,qBAAKlF,UAAU,WAAf,SACI,cAAC,EAAD,CACIwB,OAAQuD,SAIpB,sBAAK/E,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,cAAiC0E,EAAW,cAAC,EAAD,CAAcxB,oBAAqBA,EAAqBM,MAAOkB,IAAe,sBAAK1E,UAAU,aAAf,+GACtH,cAAC,IAAD,CAA2BA,UAAU,wBAGxC0E,GAAY,cAAC,GAAD,CAAalD,OAAQqC,UAG1C,cAAC,EAAD,U,SdlDIvE,K,wDAAAA,E,wDAAAA,E,wDAAAA,E,8CAAAA,E,8CAAAA,E,8CAAAA,E,gDAAAA,E,gDAAAA,E,iDAAAA,M,KAcL,IAWM+F,GAAyB,SAAClC,GAAD,OAA2BrE,uBAAa,CAC1EC,SAAS,GAAD,OAAKJ,EAAL,aACRK,OAAQ,OACRsG,KAAMC,KAAKC,UAAUrC,GACrBlE,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHI,EAAmBmG,2BACnBnG,EAAmBoG,2BACnBpG,EAAmBqG,+B,iGexBrBC,I,OAAwBC,aAAW,CACrCC,KAAM,CACFC,SAAU,IACVC,OAAQ,UAEZC,OAAQ,CACJC,QAAS,eACTF,OAAQ,QACRG,UAAW,cAEfzE,MAAO,CACH0E,SAAU,IAEdC,IAAK,CACDC,aAAc,OAITC,GAAyC,SAAC3G,GACnD,IAAMwD,EAAyBwC,KACvB/F,EAAqDD,EAArDC,QAASC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,UAAWyG,EAAwB5G,EAAxB4G,oBACrC,OAAI1G,EACO,mCACH,qBAAKE,UAAU,sCAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,KAAD,CAAUA,UAAU,eADxB,2FAGZ,wBAAQ8C,QAAS0D,EAAjB,sHAMIzG,EACO,mCACH,qBAAKC,UAAU,oBAAf,SACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,mCACf,qBAAKA,UAAU,0CAM3B,eAACyG,GAAA,EAAD,CAAMzG,UAAWoD,EAAQ0C,KAAzB,UACI,eAACY,GAAA,EAAD,WACI,cAAChG,EAAA,EAAD,CAAQH,IAAI,MAAMF,IAAKM,EAAWX,UAAU,WAC5C,cAAC2G,GAAA,EAAD,CAAY3G,UAAWoD,EAAQ1B,MAAOmB,MAAM,gBAAgB+D,cAAY,EAAxE,kIAGA,cAACD,GAAA,EAAD,CAAY3G,UAAU,eAAe4C,QAAQ,KAAKgC,UAAU,KAA5D,SACK/E,EAAQY,OAEb,eAACkG,GAAA,EAAD,CAAY3G,UAAWoD,EAAQiD,IAAKxD,MAAM,gBAA1C,2GACwBhD,EAAQgH,YAEhC,eAACF,GAAA,EAAD,CAAY/D,QAAQ,QAAQgC,UAAU,IAAtC,yDACc/E,EAAQiH,IAClB,uBAFJ,0FAGsBjH,EAAQkH,gBAGlC,cAACC,GAAA,EAAD,UACI,cAAC,IAAD,CAAMhH,UAAU,WAAWG,GAAG,IAA9B,SAAkC,cAAC8G,GAAA,EAAD,CAAQC,KAAK,QAAQlH,UAAU,iBAA/B,oIC1ErCmH,GAAqC,WAC9C,IAAMtG,EAAWC,cACXjB,EAAUkB,aAAY,SAACC,GAAD,OAA6BA,EAAMnB,QAAQoB,WAFnB,EAGvBF,aAAY,SAACC,GAAD,MAA6B,CAACA,EAAMnB,QAAQqB,QAASF,EAAMnB,QAAQsB,UAHxD,mBAG7CpB,EAH6C,KAGlCD,EAHkC,KAKpDsB,qBAAU,WACc,MAAhBvB,EAAQY,MACRI,EAAStB,OAEd,CAACsB,EAAUhB,EAAQY,OAKtB,OAAO,cAAC,GAAD,CAAaZ,QAASA,EAASC,QAASA,EAASC,UAAWA,EAAWyG,oBAHlD,WACxB3F,EAAStB,SCXJ6H,GAA2B,CACpC,CACIC,KAAM,IACNC,OAAO,EACP1C,UAAWtD,GAEf,CACI+F,KAAM,QACNC,OAAO,EACP1C,UAAWtD,GAEf,CACI+F,KAAM,SACNC,OAAO,EACP1C,UCf2B,WAC/B,OAAO,qCACH,cAAC,EAAD,IACA,sBAAK5E,UAAU,kBAAf,UACI,oBAAIA,UAAU,cAAd,sBACA,mBAAGA,UAAU,aAAb,8FACA,qBAAKA,UAAU,YAAYK,IAAKC,EAAKC,IAAI,iBAE7C,cAAC,EAAD,SDSJ,CACI8G,KAAM,qBACNC,OAAO,EACP1C,UEhBwC,WAC5C,IAAM/D,EAAWC,cACTwC,EAAOiE,cAAPjE,GACF0B,EAAQjE,aAAY,SAACC,GAAD,OAAkCA,EAAMgE,MAAM/D,WAClEyD,EAAWM,GAAO1B,GAAM0B,GAAO1B,GAAIoB,SAAW,KAJF,EAKrB3D,aAAY,SAACC,GAAD,MAAkC,CAACA,EAAMgE,MAAM9D,QAASF,EAAMgE,MAAM7D,UAL3D,mBAK3CpB,EAL2C,KAKhCD,EALgC,KAOlDsB,qBAAU,WACNP,EAAShC,KACTgC,EnBAoC/B,uBAAa,CACrDC,SAAS,GAAD,OAAKJ,EAAL,aACRK,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHI,EAAmBkI,sBACnBlI,EAAmBmI,sBACnBnI,EAAmBoI,4BmBNpB,CAAC7G,IAmCJ,OAAO,cAAC,GAAD,CAAWmE,MAAOA,EAAON,SAAUA,EAAUP,iBAb3B,SAACb,GACtBzC,ErBUwB,SAACyC,GAAD,OAAgBxE,uBAAa,CAEzDC,SAAS,GAAD,OAAKJ,EAAL,kBAAkB2E,EAAlB,oBACRtE,OAAQ,SACRC,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHR,EAAiBiJ,oBACjBjJ,EAAiBkJ,oBACjBlJ,EAAiBmJ,uBqBlBRC,CACLxE,IAEJzC,EAASkH,aAAK,eACdlH,EAAShC,MAQ2EgF,kBAjC9D,SAACV,GACvBA,EAAQG,GAAK0E,eACbnH,EAASwE,GAAuB,2BACzBlC,GADwB,IAE3B8E,QAAS3E,MAEbzC,EAAShC,MA2BiHkG,cAxBxG,SAACmD,GACnB,IAAMC,EAAqBC,OAAOC,KAAKrD,GAAOjD,OAC9ClB,ErBQqB,SAACmE,GAAD,OAAwBlG,uBAAa,CAC9DC,SAAS,GAAD,OAAKJ,EAAL,UACRK,OAAQ,OACRsG,KAAMC,KAAKC,UAAUR,GACrB/F,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHR,EAAiB4J,iBACjB5J,EAAiB6J,iBACjB7J,EAAiB8J,oBqBhBRC,CAAcP,IACvBrH,EAAShC,KACTgC,EAASkH,aAAK,UAAD,OAAWI,MAoBgIjF,oBALhI,SAACI,GACzBzC,EnBT2B,SAACyC,GAAD,OAAgBxE,uBAAa,CAE5DC,SAAS,GAAD,OAAKJ,EAAL,qBAAqB2E,GAC7BtE,OAAQ,SACRC,QAAS,CAAE,eAAgB,oBAC3BC,MAAO,CACHI,EAAmBoJ,uBACnBpJ,EAAmBqJ,uBACnBrJ,EAAmBsJ,0BmBCVC,CAAoBvF,IAC7BzC,EAAShC,MAGyLoG,kBAjB5K,WACtBpE,EAAShC,MAgB+NkB,UAAWA,EAAWD,QAASA,MF3B3Q,CACIuH,KAAM,WACNC,OAAO,EACP1C,UGzB6B,WACjC,OAAO,qCACH,cAAC,EAAD,IACA,qBAAK5E,UAAU,UAAf,SACI,cAAC,GAAD,MAEJ,cAAC,EAAD,SHqBJ,CACIqH,KAAM,IACNC,OAAO,EACP1C,UI9B2B,WAC/B,OAAO,qCACH,cAAC,EAAD,IACA,sBAAK5E,UAAU,kBAAf,UACI,oBAAIA,UAAU,cAAd,uBACA,mBAAGA,UAAU,aAAb,6BACA,cAAC,IAAD,CAA0BA,UAAU,kBAExC,cAAC,EAAD,U,wDCTF8I,GAAqC,CACvC7H,QAAS,GACTC,SAAS,EACTC,OAAO,GAGE4H,GAA8D,WAAmC,IAAlC/H,EAAiC,uDAAzB8H,GAAcE,EAAW,uCACzG,OAAQA,EAAO7G,MACX,KAAKzD,EAAiBS,mBAClB,OAAO,2BACA6B,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKzC,EAAiBU,mBAClB,OAAO,2BACA4B,GADP,IAEIE,SAAS,EACTD,QAAS+H,EAAOC,UAExB,KAAKvK,EAAiBW,mBAClB,OAAO,2BACA2B,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKzC,EAAiB4J,iBAClB,OAAO,2BACAtH,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKzC,EAAiB6J,iBAClB,OAAO,2BACAvH,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKzC,EAAiB8J,iBAClB,OAAO,2BACAxH,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKzC,EAAiBwK,UAClB,OAAOC,KAAOnI,EAAO,CACjBC,QAAQ,eACH+H,EAAOC,QAAU,CACd5E,KAAM,CACF+E,MAAM,OAK1B,KAAK1K,EAAiB2K,YAClB,OAAOF,KAAOnI,EAAO,CACjBC,QAAQ,eACH+H,EAAOC,QAAU,CACd5E,KAAM,CACF+E,MAAM,OAK1B,KAAK1K,EAAiBiJ,oBAGtB,KAAKjJ,EAAiBkJ,oBAGtB,KAAKlJ,EAAiBmJ,oBAGtB,QACI,OAAO7G,IC3Eb8H,GAAwC,CAC1C7H,QAAS,GACTC,SAAS,EACTC,OAAO,GAGEmI,GAAsE,WAAmC,IAAlCtI,EAAiC,uDAAzB8H,GAAcE,EAAW,uCACjH,OAAQA,EAAO7G,MACX,KAAKvD,EAAmBY,qBACpB,OAAO,2BACAwB,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAKvC,EAAmBa,qBACpB,OAAO,2BACAuB,GADP,IAEIE,SAAS,EACTD,QAAS+H,EAAOC,UAExB,KAAKrK,EAAmBc,qBACpB,OAAO,2BACAsB,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,QACI,OAAOH,IC3Bb8H,GAAoC,CACtC7H,QAAS,GACTC,SAAS,EACTC,OAAO,GAGEoI,GAAoE,WAAmC,IAAlCvI,EAAiC,uDAAzB8H,GAAcE,EAAW,uCAC/G,OAAQA,EAAO7G,MACX,KAAK7C,EAAmBkI,sBACpB,OAAO,2BACAxG,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAK7B,EAAmBmI,sBACpB,OAAO,2BACAzG,GADP,IAEIE,SAAS,EACTD,QAAS+H,EAAOC,UAExB,KAAK3J,EAAmBoI,sBACpB,OAAO,2BACA1G,GADP,IAEIE,SAAS,EACTC,OAAO,IAEf,KAAK7B,EAAmBmG,2BAExB,KAAKnG,EAAmBoG,2BAExB,KAAKpG,EAAmBqG,2BAExB,KAAKrG,EAAmBoJ,uBAExB,KAAKpJ,EAAmBqJ,uBAExB,KAAKrJ,EAAmBsJ,uBAExB,QACI,OAAO5H,I,mECtCNwI,GAA8B,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAV,GACxD,GAAIA,EAAO7G,OAASwH,KAAiB,CACjC,IAAMC,EAAYH,EAAMI,WACxBC,YAAW,WAEP,IADA,IAAMC,EAAWN,EAAMI,WADJ,WAEVG,GACL,GAAkC,MAA9BJ,EAAU5E,MAAM/D,QAAQ+I,GACxB,MAAM,CAAN,U3BqD6C,IAAC1G,E2BnD9CyG,EAAS/E,MAAM/D,QAAQ+I,GAAGtF,SAAS3C,OAAS6H,EAAU5E,MAAM/D,QAAQ+I,GAAGtF,SAAS3C,QAAuG,QAA7FgI,EAAS/E,MAAM/D,QAAQ+I,GAAGtF,SAASqF,EAAS/E,MAAM/D,QAAQ+I,GAAGtF,SAAS3C,OAAS,GAAGkB,QAC5KwG,EAAM5I,U3BkDwCyC,E2BjD1C0G,EACAF,YAAW,W3BqDkC,IAACxG,E2BpD1CmG,EAAM5I,U3BoDoCyC,E2BnDtC0G,E3BmD8D,CAC1F7H,KAAMzD,EAAiB2K,YACvBJ,QAAS3F,O2BnDc,K3B4C+D,CACtFnB,KAAMzD,EAAiBwK,UACvBD,QAAS3F,M2BzDQ0G,EAAI,EAAGA,EAAID,EAAS/E,MAAM/D,QAAQc,OAAQiI,IAAK,CAAC,IAAD,IAA/CA,GAA+C,qCAezD,KAEP,OAAON,EAAKV,MCpBZiB,GAA+B,KAEtBC,GAA0B,SAAAT,GAAK,OAAI,SAAAC,GAAI,OAAI,SAACV,GACrD,GAAIA,EAAO7G,OAAS7C,EAAmBoG,2BAA4B,CAC3DuE,IACAE,aAAaF,IAF8C,MAIpCjB,EAAOC,QAA1BhG,EAJuD,EAIvDA,OAAQgF,EAJ+C,EAI/CA,OACVmC,EAAsB,CAAC,yCAAD,OAAYnH,EAAZ,iIAAkDA,EAAlD,oRAAmHA,GAAnH,+GAAqJA,EAArJ,qDAA2KA,EAA3K,0IAAgNA,EAAhN,yHAAmPA,EAAnP,wHAAqRA,EAArR,4DAA6SA,EAA7S,uLAA4VA,EAA5V,gCAGtBoH,GADiBC,EACa,EADAC,EACG,GADqBC,KAAKC,MAAMH,EAAME,KAAKE,UAAYH,EAAM,EAAID,KAEzF,QAAXrH,IAEAgH,GAAQH,YAAW,WACfL,EAAM5I,SAASwE,GACX,CAAE/B,GAAI0E,eAAUC,SAAQjF,KAAMoH,EAAUC,EAAQ,GAAIpH,OAAQ,SAEhEwG,EAAM5I,SAAShC,OAChB,MATe,IAACyL,EAAaC,EAYxC,OAAOb,EAAKV,MChBH2B,GAAmBC,eAE1BC,GAAgB,CAClBC,IAAK,MACLC,aACAC,UAAW,CAAC,QAAS,UAAW,a,GAGX,WACrB,ICP8BL,EDQxBlB,EAAewB,uBACjBC,aAAeL,ICTWF,EDSsBA,GCTDQ,2BAA0B,CAC7EC,OAAQC,aAAcV,GACtB3F,MAAO+D,GACPlJ,QAASyJ,GACT5E,SAAU6E,ODGW,GAIjB+B,+BACIC,2BAAgBC,aAAiBb,IAAUc,gBAAeC,KACtDxB,GAAaV,MAGzB,MAAO,CAAEC,QAAOkC,UADaC,aAAanC,IEpBVoC,GAArBpC,G,GAAAA,MAAOkC,G,GAAAA,UAEtBG,IAASC,OACL,cAAC,IAAD,CAAUtC,MAAOA,GAAjB,SACI,cAAC,KAAD,CAAakC,UAAWA,GAAxB,SACI,cAAC,KAAD,CAAiBhB,QAASA,GAA1B,SACI,cAAC,IAAD,UACKvD,GAAO3D,KAAI,SAACuI,EAAO3B,GAAR,OAAmB,cAAC,IAAD,eAAuB2B,GAAX3B,cAKzD4B,SAASC,eAAe,S","file":"static/js/main.d8f31218.chunk.js","sourcesContent":["import { createAction } from \"redux-api-middleware\";\nimport { ActionCreator } from \"redux\";\nimport { NewChatType } from \"../types\";\nexport const api = \"http://localhost:4000\";\n\nexport enum ChatsActionTypes {\n    ADD_CHAT_REQUEST = \"ADD_CHAT_REQUEST\",\n    ADD_CHAT_SUCCESS = \"ADD_CHAT_SUCCESS\",\n    ADD_CHAT_FAILURE = \"ADD_CHAT_FAILURE\",\n\n    CHAT_FIRE = \"CHAT_FIRE\",\n    CHAT_UNFIRE = \"CHAT_UNFIRE\",\n\n    DELETE_CHAT_REQUEST = \"DELETE_CHAT_REQUEST\",\n    DELETE_CHAT_SUCCESS = \"DELETE_CHAT_SUCCESS\",\n    DELETE_CHAT_FAILURE = \"DELETE_CHAT_FAILURE\",\n\n    CHATS_LOAD_REQUEST = \"CHATS_LOAD_REQUEST\",\n    CHATS_LOAD_SUCCESS = \"CHATS_LOAD_SUCCESS\",\n    CHATS_LOAD_FAILURE = \"CHATS_LOAD_FAILURE\",\n};\n\ntype ChatUnfireType = {\n    id: number;\n};\n\ntype ChatFireType = ChatUnfireType & {\n    timer?: NodeJS.Timeout;\n};\n\ntype chatFireActionType = {\n    type: ChatsActionTypes.CHAT_FIRE;\n    payload: ChatFireType;\n};\n\ntype chatUnfireActionType = {\n    type: ChatsActionTypes.CHAT_UNFIRE;\n    payload: ChatUnfireType;\n};\n\nexport const addChatAction = (chats: NewChatType) => createAction({\n    endpoint: `${api}/chats`,\n    method: \"POST\",\n    body: JSON.stringify(chats),\n    headers: { \"Content-Type\": \"application/json\" },\n    types: [\n        ChatsActionTypes.ADD_CHAT_REQUEST,\n        ChatsActionTypes.ADD_CHAT_SUCCESS,\n        ChatsActionTypes.ADD_CHAT_FAILURE,\n    ],\n});\n\nexport const deleteChatAction = (id: number) => createAction({\n\n    endpoint: `${api}/chats/${id}?_embed=messages`,\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json\" },\n    types: [\n        ChatsActionTypes.DELETE_CHAT_REQUEST,\n        ChatsActionTypes.DELETE_CHAT_SUCCESS,\n        ChatsActionTypes.DELETE_CHAT_FAILURE,\n    ],\n});\n\nexport const chatFireAction: ActionCreator<chatFireActionType> = (id: ChatUnfireType) => ({\n    type: ChatsActionTypes.CHAT_FIRE,\n    payload: id,\n});\n\nexport const chatUnfireAction: ActionCreator<chatUnfireActionType> = (id: ChatUnfireType) => ({\n    type: ChatsActionTypes.CHAT_UNFIRE,\n    payload: id,\n});\n\nexport const chatsLoadAction = () => createAction({\n    endpoint: `${api}/chats?_embed=messages`,\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n    types: [\n        ChatsActionTypes.CHATS_LOAD_REQUEST,\n        ChatsActionTypes.CHATS_LOAD_SUCCESS,\n        ChatsActionTypes.CHATS_LOAD_FAILURE,\n    ],\n});","import { createAction } from \"redux-api-middleware\";\r\nimport { api } from \"./chats\";\r\n\r\nexport enum ProfileActionTypes {\r\n    PROFILE_INFO_REQUEST = \"PROFILE_INFO_REQUEST\",\r\n    PROFILE_INFO_SUCCESS = \"PROFILE_INFO_SUCCESS\",\r\n    PROFILE_INFO_FAILURE = \"PROFILE_INFO_FAILURE\",\r\n};\r\n\r\nexport const profileInfoAction = () => createAction({\r\n    endpoint: `${api}/profiles/0`,\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    types: [\r\n        ProfileActionTypes.PROFILE_INFO_REQUEST,\r\n        ProfileActionTypes.PROFILE_INFO_SUCCESS,\r\n        ProfileActionTypes.PROFILE_INFO_FAILURE,\r\n    ],\r\n});","import { createAction } from \"redux-api-middleware\";\r\nimport { MessagesType } from \"../types\";\r\nimport { api } from \"./chats\";\r\n\r\nexport enum MessageActionTypes {\r\n    CHATS_MESSAGE_SEND_REQUEST = \"CHATS_MESSAGE_SEND_REQUEST\",\r\n    CHATS_MESSAGE_SEND_SUCCESS = \"CHATS_MESSAGE_SEND_SUCCESS\",\r\n    CHATS_MESSAGE_SEND_FAILURE = \"CHATS_MESSAGE_SEND_FAILURE\",\r\n\r\n    MESSAGES_LOAD_REQUEST = \"MESSAGES_LOAD_REQUEST\",\r\n    MESSAGES_LOAD_SUCCESS = \"MESSAGES_LOAD_SUCCESS\",\r\n    MESSAGES_LOAD_FAILURE = \"MESSAGES_LOAD_FAILURE\",\r\n\r\n    DELETE_MESSAGE_REQUEST = \"DELETE_MESSAGE_REQUEST\",\r\n    DELETE_MESSAGE_SUCCESS = \"DELETE_MESSAGE_SUCCESS\",\r\n    DELETE_MESSAGE_FAILURE = \"DELETE_MESSAGE_FAILURE\",\r\n};\r\n\r\nexport const chatsMessageLoadAction = () => createAction({\r\n    endpoint: `${api}/messages`,\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    types: [\r\n        MessageActionTypes.MESSAGES_LOAD_REQUEST,\r\n        MessageActionTypes.MESSAGES_LOAD_SUCCESS,\r\n        MessageActionTypes.MESSAGES_LOAD_FAILURE,\r\n    ],\r\n});\r\n\r\nexport const chatsMessageSendAction = (message: MessagesType) => createAction({\r\n    endpoint: `${api}/messages`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(message),\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    types: [\r\n        MessageActionTypes.CHATS_MESSAGE_SEND_REQUEST,\r\n        MessageActionTypes.CHATS_MESSAGE_SEND_SUCCESS,\r\n        MessageActionTypes.CHATS_MESSAGE_SEND_FAILURE,\r\n    ],\r\n});\r\n\r\nexport const deleteMessageAction = (id: string) => createAction({\r\n\r\n    endpoint: `${api}/messages/${id}`,\r\n    method: \"DELETE\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    types: [\r\n        MessageActionTypes.DELETE_MESSAGE_REQUEST,\r\n        MessageActionTypes.DELETE_MESSAGE_SUCCESS,\r\n        MessageActionTypes.DELETE_MESSAGE_FAILURE,\r\n    ],\r\n});\r\n\r\n","export default __webpack_public_path__ + \"static/media/leo.f870085d.jpg\";","export default __webpack_public_path__ + \"static/media/chat.0d20f42e.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Avatar, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport userPhoto from \"../.././img/leo.jpg\";\r\nimport pic from \"../.././img/chat.png\";\r\nimport \"./Header.css\";\r\n\r\nexport const Header: React.FC<HeaderType> = (props) => {\r\n    const { profile, isError, isLoading } = props;\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <List>\r\n                <ListItem>\r\n                    <Link className=\"nav-link\" to=\"/home\"><ListItemText /><img className=\"home-img\" src={pic} alt=\"logo\" /></Link>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Link className=\"nav-link\" to=\"/chats/123\"><ListItemText primary=\"Чаты\" /></Link>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Link className=\"nav-link\" to=\"/about\"><ListItemText primary=\"О нас\" /></Link>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Link className=\"nav-link\" to=\"/pagenotfount\"><ListItemText primary=\"Страница с ошибкой\" /></Link>\r\n                </ListItem>\r\n                <ListItem >\r\n                    <Link className=\"nav-link\" to=\"/profile\"><ListItemText primary=\"Профиль\" /> </Link>\r\n                </ListItem>\r\n                <ListItem >\r\n                    {isError && <ListItemText primary=\"Ошибка загрузки профиля\" />}\r\n                    {isLoading ? <ListItemText primary=\"Загрузка...\" /> :\r\n                        <Link className=\"nav-link flex-link\" to=\"/profile\"> <ListItemText primary={profile.name}\r\n                        /><Avatar alt=\"Leo\" src={isError ? \"\" : userPhoto}\r\n                            className=\"avatar-small\" /> </Link>\r\n                    }\r\n                </ListItem>\r\n            </List>\r\n        </div >\r\n    )\r\n};","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { profileInfoAction } from \"../actions/profile\";\r\nimport { Header } from \"../components/Header\";\r\n\r\nexport const HeaderContainer: React.FC<{}> = () => {\r\n    const dispatch = useDispatch();\r\n    const profile = useSelector((state: DefaultRootState) => state.profile.entries);\r\n    const [isLoading, isError] = useSelector((state: DefaultRootState) => [state.profile.loading, state.profile.error]);\r\n\r\n    useEffect((): void => {\r\n        if (profile.name == null) {\r\n            dispatch(profileInfoAction());\r\n        }\r\n    }, [dispatch, profile.name]);\r\n\r\n    return <Header isLoading={isLoading} isError={isError} profile={profile} />\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nexport const Footer: React.FC<{}> = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p className=\"footer-text\">2020. All Rights Reserved</p>\r\n        </div>\r\n    )\r\n};","import React from \"react\";\nimport { HeaderContainer } from \"../containers/HeaderContainer\";\nimport { Footer } from \"../components/Footer\";\nimport ForumOutlinedIcon from \"@material-ui/icons/ForumOutlined\";\n\nexport const Home: React.FC<{}> = () => {\n    return <>\n        <HeaderContainer />\n        <div className=\"about-container\">\n            <h1 className=\"about-title\">Главная страница</h1>\n            <p className=\"about-text\">Добро пожаловать на наш сайт!</p>\n            <ForumOutlinedIcon className=\"home-icon\" />\n        </div>\n        <Footer />\n    </>\n};","export default __webpack_public_path__ + \"static/media/about.e1d300d6.png\";","import React, { useState } from \"react\";\r\nimport { TextField, Fab } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nexport const ChatForm: React.FC<ChatFormType> = ({ onSend }) => {\r\n    const [dataForm, setDataForm] = useState({\r\n        title: \"\"\r\n    });\r\n\r\n    const onChangeInputHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setDataForm({\r\n            ...dataForm,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    const onSubmitForm = (): void => {\r\n        const { title } = dataForm;\r\n\r\n        if (!title || title.trim().length === 0) {\r\n            alert(\"Введите название чата\");\r\n            return;\r\n        }\r\n        onSend({ title });\r\n        setDataForm({ ...dataForm, title: \"\" });\r\n    };\r\n    const keydownHandler = (event: React.KeyboardEvent<HTMLDivElement>): void => {\r\n        if (event.keyCode === 13 && event.ctrlKey) {\r\n            onSubmitForm();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-wrapper\">\r\n            <TextField\r\n                label=\"Введите название чата\"\r\n                name=\"title\"\r\n                type=\"text\"\r\n                value={dataForm.title}\r\n                onChange={onChangeInputHandler}\r\n                onKeyDown={keydownHandler}\r\n            />\r\n            <Fab\r\n                variant=\"round\"\r\n                color=\"primary\"\r\n                onClick={onSubmitForm}\r\n            >\r\n                <AddIcon />\r\n            </Fab>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./Message.css\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\n\r\nexport const Message: React.FC<MessageType> = (props) => {\r\n    const { text, author, handleDeleteMessage, message } = props;\r\n    const classes: string = classNames(\"message\", {\r\n        \"message-sender\": author !== \"Bot\",\r\n        \"message-bot\": author === \"Bot\",\r\n    });\r\n\r\n    return <div className={classes}>\r\n        {text} - <b className=\"message-author\">{author}</b>\r\n        <DeleteForeverOutlinedIcon onClick={() => handleDeleteMessage(message.id!)} className=\"delete-message\" />\r\n    </div>\r\n};","import React from \"react\";\r\nimport { Message } from \"../Message\";\r\n\r\nexport const MessagesList: React.FC<MessagesListType> = (props) => {\r\n    const { items, handleDeleteMessage } = props;\r\n    return <>{items.map((item) => (<Message message={item} handleDeleteMessage={handleDeleteMessage} text={item.text} author={item.author} key={item.id} />))}\r\n    </>\r\n};\r\n\r\n","import React, { useState } from \"react\";\r\nimport { TextField, Fab } from \"@material-ui/core\";\r\nimport CachedIcon from \"@material-ui/icons/Cached\";\r\nimport { Send } from \"@material-ui/icons\";\r\nimport \"./MessageForm.css\";\r\n\r\nexport const MessageForm: React.FC<MessageFormType> = ({ onSend }) => {\r\n    const [dataForm, setDataForm] = useState({\r\n        text: \"\",\r\n        author: \"\",\r\n    });\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n        setDataForm({\r\n            ...dataForm,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleMessageSend = (): void => {\r\n        const { text, author } = dataForm;\r\n\r\n        if (!text || text.trim().length === 0) {\r\n            alert(\"Введите текст сообщения\");\r\n            return;\r\n        }\r\n        if (!author) {\r\n            alert(\"Введите автора сообщения!\");\r\n            return;\r\n        }\r\n        onSend({ author, text });\r\n        setDataForm({ ...dataForm, text: \"\" });\r\n    };\r\n\r\n    const keydownHandler = (event: React.KeyboardEvent<HTMLDivElement>): void => {\r\n        if (event.keyCode === 13 && event.ctrlKey) {\r\n            handleMessageSend();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"send-window\">\r\n            <CachedIcon className=\"message-sending\" />\r\n            <TextField\r\n                label=\"Введите имя автора\"\r\n                name=\"author\"\r\n                type=\"text\"\r\n                value={dataForm.author}\r\n                onChange={handleInputChange}\r\n                onKeyDown={keydownHandler}\r\n            />\r\n            <TextField\r\n                label=\"Введите текст сообщения\"\r\n                name=\"text\"\r\n                value={dataForm.text}\r\n                onChange={handleInputChange}\r\n                onKeyDown={keydownHandler}\r\n                multiline\r\n                autoFocus\r\n            />\r\n            <Fab\r\n                variant=\"round\"\r\n                color=\"primary\"\r\n                onClick={handleMessageSend}\r\n            >\r\n                <Send />\r\n            </Fab>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\nexport const ChatList: React.FC<ChatListType> = (props) => {\r\n    const { items, handleDeleteChat } = props;\r\n\r\n    return <>\r\n        {items.map((item) => (\r\n            <List key={item.id} className=\"chat-root\">\r\n                <ListItem alignItems=\"flex-start\" className={item.fire ? \"new-message\" : \"\"}>\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"avatar\">\r\n                            {item.title.substr(0, 1)} </Avatar>\r\n                    </ListItemAvatar>\r\n                    <Link className=\"nav-link\" to={`/chats/${item.id}`}>\r\n                        <ListItemText\r\n                            primary={item.title}\r\n                            secondary={\r\n                                <React.Fragment>\r\n                                    {item.messages[item.messages.length - 1] && item.messages[item.messages.length - 1].text}\r\n                                </React.Fragment>\r\n                            }\r\n                        />\r\n                    </Link>\r\n                    <div className=\"delete-chat\" onClick={() => handleDeleteChat(item.id)}>\r\n                        <DeleteForeverOutlinedIcon className=\"delete-chat-icon\" />\r\n                    </div>\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\" />\r\n            </List >\r\n        ))}\r\n    </>\r\n};","import React from \"react\";\r\nimport { HeaderContainer } from \"../../containers/HeaderContainer\";\r\nimport { Footer } from \"../Footer\";\r\nimport \"./ChatsLoading.css\";\r\n\r\nexport const ChatsLoading: React.FC<{}> = () => {\r\n    return <>\r\n        < HeaderContainer />\r\n        <div className=\"loading-container\">\r\n            <div className=\"loadingWrap\">\r\n                <div className=\"loadingBoxes loadingBoxColour1\"></div>\r\n                <div className=\"loadingBoxes loadingBoxColour2\"></div>\r\n                <div className=\"loadingBoxes loadingBoxColour3\"></div>\r\n                <div className=\"loadingBoxes loadingBoxColour4\"></div>\r\n                <div className=\"loadingBoxes loadingBoxColour5\"></div>\r\n            </div>\r\n        </div>\r\n        <Footer />\r\n    </>\r\n};","import React from \"react\";\r\nimport SubdirectoryArrowLeftIcon from \"@material-ui/icons/SubdirectoryArrowLeft\";\r\nimport CloudOffIcon from \"@material-ui/icons/CloudOff\";\r\nimport { Footer } from \"../Footer\";\r\nimport { ChatForm } from \"../ChatForm\";\r\nimport { MessagesList } from \"../MessagesList\";\r\nimport { MessageForm } from \"../MessageForm\";\r\nimport { ChatList } from \"../ChatList\";\r\nimport { HeaderContainer } from \"../../containers/HeaderContainer\";\r\nimport { ChatsLoading } from \"../ChatsLoading\";\r\nimport \"./Messenger.css\";\r\n\r\nexport const Messenger: React.FC<MessengerType> = (props) => {\r\n    const { messages, handleMessageSend, handleNewChat, chats, handleDeleteChat, handleDeleteMessage, isLoading, isError, handleChatsReload } = props;\r\n    const chatList: ChatType[] = Array.from(chats);\r\n\r\n    if (isError) {\r\n        return (<>\r\n            <HeaderContainer />\r\n            <div className=\"error-wrapper\">\r\n                <div className=\"loading-error\">\r\n                    <CloudOffIcon className=\"error-icon\" />\r\n                    Ошибка загрузки :(\r\n                <button onClick={handleChatsReload}>Обновить чаты</button>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>)\r\n    }\r\n    if (isLoading) {\r\n        return (<ChatsLoading />);\r\n    }\r\n\r\n    return (<>\r\n        <HeaderContainer />\r\n        <div className=\"main\">\r\n            <div className=\"chats-container\">\r\n                <div className=\"chats\">\r\n                    {chatList ? <ChatList handleDeleteChat={handleDeleteChat} items={chatList} /> : <div>ChatList</div>}\r\n                </div>\r\n                <div className=\"new-chat\">\r\n                    <ChatForm\r\n                        onSend={handleNewChat}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"messanger\">\r\n                <div className=\"messages-list\"> {messages ? <MessagesList handleDeleteMessage={handleDeleteMessage} items={messages} /> : <div className=\"empty-chat\">Выберите чат слева\r\n                    <SubdirectoryArrowLeftIcon className=\"arrow-to-chat\" />\r\n                </div>\r\n                }</div>\r\n                {messages && <MessageForm onSend={handleMessageSend} />}\r\n            </div>\r\n        </div>\r\n        <Footer />\r\n    </>\r\n    )\r\n};","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport userPhoto from \"../../img/leo.jpg\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport \"./ProfileCard.css\";\r\n\r\nconst useStyles: StyleTypes = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        margin: \"0 auto\"\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    }\r\n});\r\n\r\nexport const ProfileCard: React.FC<ProfileCardType> = (props) => {\r\n    const classes: UseStyleTypes = useStyles();\r\n    const { profile, isError, isLoading, handleProfileReload } = props;\r\n    if (isError) {\r\n        return <>\r\n            <div className=\"error-wrapper error-profile-wrapper\">\r\n                <div className=\"loading-error\">\r\n                    <FaceIcon className=\"error-icon\" />\r\n        Ошибка загрузки :(\r\n    <button onClick={handleProfileReload}>Обновить контакты</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    if (isLoading) {\r\n        return <>\r\n            <div className=\"loading-container\">\r\n                <div className=\"loadingWrap\">\r\n                    <div className=\"loadingBoxes loadingBoxColour1\"></div>\r\n                    <div className=\"loadingBoxes loadingBoxColour2\"></div>\r\n                    <div className=\"loadingBoxes loadingBoxColour3\"></div>\r\n                    <div className=\"loadingBoxes loadingBoxColour4\"></div>\r\n                    <div className=\"loadingBoxes loadingBoxColour5\"></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    }\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Avatar alt=\"Leo\" src={userPhoto} className=\"avatar\" />\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Профиль пользователя:\r\n        </Typography>\r\n                <Typography className=\"profile-name\" variant=\"h5\" component=\"h2\">\r\n                    {profile.name}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Имя Пользователя: @{profile.nickname}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    Телефон: {profile.tel}\r\n                    <br />\r\n                    Последний визит: {profile.lastVisit}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Link className=\"nav-link\" to=\"/\"><Button size=\"small\" className=\"profile-button\">Вернуться на главную</Button></Link>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { profileInfoAction } from \"../actions/profile\";\r\nimport { ProfileCard } from \"../components/ProfileCard\";\r\n\r\nexport const ProfileCardContainer: React.FC<{}> = () => {\r\n    const dispatch = useDispatch();\r\n    const profile = useSelector((state: DefaultRootState) => state.profile.entries);\r\n    const [isLoading, isError] = useSelector((state: DefaultRootState) => [state.profile.loading, state.profile.error]);\r\n\r\n    useEffect((): void => {\r\n        if (profile.name == null) {\r\n            dispatch(profileInfoAction());\r\n        }\r\n    }, [dispatch, profile.name]);\r\n\r\n    const handleProfileReload = (): void => {\r\n        dispatch(profileInfoAction());\r\n    };\r\n    return <ProfileCard profile={profile} isError={isError} isLoading={isLoading} handleProfileReload={handleProfileReload} />\r\n};\r\n\r\n","import { Home } from \"../pages/Home\";\nimport { About } from \"../pages/About\";\nimport { Error } from \"../pages/Error\";\nimport { MessengerContainer } from \"../containers/MessengerContainer\";\nimport { Profile } from \"../pages/Profile\";\n\nexport const routes: RoutesFuncType[] = [\n    {\n        path: \"/\",\n        exact: true,\n        component: Home\n    },\n    {\n        path: \"/home\",\n        exact: true,\n        component: Home\n    },\n    {\n        path: \"/about\",\n        exact: true,\n        component: About\n    },\n    {\n        path: \"/chats/:id([0-9]+)\",\n        exact: true,\n        component: MessengerContainer\n    },\n    {\n        path: \"/profile\",\n        exact: false,\n        component: Profile\n    },\n    {\n        path: \"*\",\n        exact: false,\n        component: Error\n    },\n];","import React from \"react\";\nimport { HeaderContainer } from \"../containers/HeaderContainer\";\nimport { Footer } from \"../components/Footer\";\nimport pic from \"../../src/img/about.png\";\n\nexport const About: React.FC<{}> = () => {\n    return <>\n        <HeaderContainer />\n        <div className=\"about-container\">\n            <h1 className=\"about-title\">About Us</h1>\n            <p className=\"about-text\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Voluptatibus, aliquid.</p>\n            <img className=\"about-img\" src={pic} alt=\"Messenger\" />\n        </div>\n        <Footer />\n    </>\n};","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { Messenger } from \"../components/Messenger\";\nimport { chatsLoadAction, addChatAction, deleteChatAction } from \"../actions/chats\";\nimport { chatsMessageSendAction, deleteMessageAction, chatsMessageLoadAction } from \"../actions/messages\";\nimport { push } from \"connected-react-router\";\nimport { nanoid } from \"nanoid\";\n\nexport const MessengerContainer: React.FC<{}> = () => {\n    const dispatch = useDispatch();\n    const { id } = useParams<ParamTypes>();\n    const chats = useSelector((state: DefaultChatsRootState) => state.chats.entries);\n    const messages = chats[+id] ? chats[+id].messages : null;\n    const [isLoading, isError] = useSelector((state: DefaultChatsRootState) => [state.chats.loading, state.chats.error]);\n\n    useEffect((): void => {\n        dispatch(chatsLoadAction());\n        dispatch(chatsMessageLoadAction());\n    }, [dispatch]);\n\n    const handleMessageSend = (message: MessagesType): void => {\n        message.id = nanoid();\n        dispatch(chatsMessageSendAction({\n            ...message,\n            chatId: +id\n        }));\n        dispatch(chatsLoadAction());\n    };\n\n    const handleNewChat = (chat: NewChatType): void => {\n        const lastChatId: number = Object.keys(chats).length;\n        dispatch(addChatAction(chat));\n        dispatch(chatsLoadAction());\n        dispatch(push(`/chats/${lastChatId}`));\n    };\n\n    const handleChatsReload = (): void => {\n        dispatch(chatsLoadAction());\n    };\n\n    const handleDeleteChat = (id: number): void => {\n        dispatch(deleteChatAction(\n            id\n        ));\n        dispatch(push(`/chats/123`));\n        dispatch(chatsLoadAction());\n    };\n\n    const handleDeleteMessage = (id: string): void => {\n        dispatch(deleteMessageAction(id));\n        dispatch(chatsLoadAction());\n    };\n\n    return <Messenger chats={chats} messages={messages} handleDeleteChat={handleDeleteChat} handleMessageSend={handleMessageSend} handleNewChat={handleNewChat} handleDeleteMessage={handleDeleteMessage} handleChatsReload={handleChatsReload} isLoading={isLoading} isError={isError} />\n\n};\n","import React from \"react\";\r\nimport { HeaderContainer } from \"../containers/HeaderContainer\";\r\nimport { Footer } from \"../components/Footer\";\r\nimport { ProfileCardContainer } from \"../containers/ProfileCardContainer\";\r\n\r\nexport const Profile: React.FC<{}> = () => {\r\n    return <>\r\n        <HeaderContainer />\r\n        <div className=\"profile\">\r\n            <ProfileCardContainer />\r\n        </div>\r\n        <Footer />\r\n    </>\r\n};","import React from \"react\";\nimport { HeaderContainer } from \"../containers/HeaderContainer\";\nimport { Footer } from \"../components/Footer\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\n\nexport const Error: React.FC<{}> = () => {\n    return <>\n        <HeaderContainer />\n        <div className=\"about-container\">\n            <h1 className=\"about-title\">Error 404</h1>\n            <p className=\"about-text\">Page not found.</p>\n            <ErrorOutlineOutlinedIcon className=\"error-page\" />\n        </div>\n        <Footer />\n    </>\n};","import update from \"react-addons-update\";\r\nimport { ChatsActionTypes } from \"../actions/chats\";\r\nimport { Reducer } from \"redux\";\r\n\r\nconst initialState: InitialChatStateType = {\r\n    entries: {},\r\n    loading: false,\r\n    error: false,\r\n};\r\n\r\nexport const chatsReducer: Reducer<InitialChatStateType, ActionChatType> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ChatsActionTypes.CHATS_LOAD_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n            };\r\n        case ChatsActionTypes.CHATS_LOAD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                entries: action.payload,\r\n            };\r\n        case ChatsActionTypes.CHATS_LOAD_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n            };\r\n        case ChatsActionTypes.ADD_CHAT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n            };\r\n        case ChatsActionTypes.ADD_CHAT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n            };\r\n        case ChatsActionTypes.ADD_CHAT_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n            };\r\n        case ChatsActionTypes.CHAT_FIRE:\r\n            return update(state, {\r\n                entries: {\r\n                    [action.payload]: {\r\n                        fire: {\r\n                            $set: true,\r\n                        },\r\n                    },\r\n                },\r\n            });\r\n        case ChatsActionTypes.CHAT_UNFIRE:\r\n            return update(state, {\r\n                entries: {\r\n                    [action.payload]: {\r\n                        fire: {\r\n                            $set: false,\r\n                        },\r\n                    },\r\n                },\r\n            });\r\n        case ChatsActionTypes.DELETE_CHAT_REQUEST:\r\n            return state;\r\n\r\n        case ChatsActionTypes.DELETE_CHAT_SUCCESS:\r\n            return state;\r\n\r\n        case ChatsActionTypes.DELETE_CHAT_FAILURE:\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { Reducer } from \"redux\";\r\nimport { ProfileActionTypes } from \"../actions/profile\";\r\n\r\nconst initialState: InitailProfileStateType = {\r\n    entries: {},\r\n    loading: false,\r\n    error: false,\r\n};\r\n\r\nexport const profileReducer: Reducer<InitailProfileStateType, ActionProfileType> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ProfileActionTypes.PROFILE_INFO_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n            };\r\n        case ProfileActionTypes.PROFILE_INFO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                entries: action.payload,\r\n            };\r\n        case ProfileActionTypes.PROFILE_INFO_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { Reducer } from \"redux\";\r\nimport { MessageActionTypes } from \"../actions/messages\";\r\n\r\nconst initialState: InitialMessagesType = {\r\n    entries: {},\r\n    loading: false,\r\n    error: false,\r\n};\r\n\r\nexport const messagesReducer: Reducer<InitialMessagesType, ActionMessagesType> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case MessageActionTypes.MESSAGES_LOAD_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false,\r\n            };\r\n        case MessageActionTypes.MESSAGES_LOAD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                entries: action.payload,\r\n            };\r\n        case MessageActionTypes.MESSAGES_LOAD_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true,\r\n            };\r\n        case MessageActionTypes.CHATS_MESSAGE_SEND_REQUEST:\r\n            return state;\r\n        case MessageActionTypes.CHATS_MESSAGE_SEND_SUCCESS:\r\n            return state;\r\n        case MessageActionTypes.CHATS_MESSAGE_SEND_FAILURE:\r\n            return state;\r\n        case MessageActionTypes.DELETE_MESSAGE_REQUEST:\r\n            return state;\r\n        case MessageActionTypes.DELETE_MESSAGE_SUCCESS:\r\n            return state;\r\n        case MessageActionTypes.DELETE_MESSAGE_FAILURE:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { LOCATION_CHANGE } from \"connected-react-router\";\r\nimport { chatFireAction, chatUnfireAction } from \"../actions/chats\";\r\nimport { Middleware } from \"redux\";\r\n\r\nexport const newMessageAlert: Middleware = store => next => action => {\r\n    if (action.type === LOCATION_CHANGE) {\r\n        const thisState = store.getState();\r\n        setTimeout((): void => {\r\n            const newState = store.getState();\r\n            for (let i = 0; i < newState.chats.entries.length; i++) {\r\n                if (thisState.chats.entries[i] == null) {\r\n                    return;\r\n                }\r\n                if (newState.chats.entries[i].messages.length > thisState.chats.entries[i].messages.length && newState.chats.entries[i].messages[newState.chats.entries[i].messages.length - 1].author === \"Bot\") {\r\n                    store.dispatch(chatFireAction(\r\n                        i,\r\n                        setTimeout((): void => {\r\n                            store.dispatch(chatUnfireAction(\r\n                                i\r\n                            ));\r\n                        }, 9000)\r\n                    ));\r\n                }\r\n            }\r\n        }, 5000);\r\n    }\r\n    return next(action);\r\n};","import { chatsLoadAction } from \"../actions/chats\";\nimport { MessageActionTypes } from \"../actions/messages\";\nimport { chatsMessageSendAction } from \"../actions/messages\";\nimport { nanoid } from \"nanoid\";\nimport { Middleware } from \"redux\";\n\nlet timer: NodeJS.Timeout | null = null;\n\nexport const botMiddware: Middleware = store => next => (action: ActionType) => {\n    if (action.type === MessageActionTypes.CHATS_MESSAGE_SEND_SUCCESS) {\n        if (timer) {\n            clearTimeout(timer);\n        }\n        const { author, chatId } = action.payload;\n        const botAnswer: string[] = [`Привет, ${author}, чем я могу тебе помочь?`, `${author}, спроси что-нибудь проще.`, `Очень интересная история, ${author}`, `Не согласен с тобой, ${author}.`, `Привет, ${author}, приятно познакомиться!`, `${author}, повтори, пожалуйста.`, `${author}, полностью согласен!`, `${author}, как дела?`, `${author}, погода и правда сегодня хорошая.`, `${author}, пока!`];\n\n        const randomMessage = (min: number, max: number): number => Math.floor(min + Math.random() * (max + 1 - min));\n        const index: number = randomMessage(1, 10);\n        if (author !== \"Bot\") {\n\n            timer = setTimeout((): void => {\n                store.dispatch(chatsMessageSendAction(\n                    { id: nanoid(), chatId, text: botAnswer[index - 1], author: \"Bot\" }\n                ));\n                store.dispatch(chatsLoadAction());\n            }, 2000);\n        }\n    }\n    return next(action);\n};\n\n","import { createStore, applyMiddleware, Store } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { apiMiddleware } from \"redux-api-middleware\";\r\nimport { createRootReducer } from \"../reducers\";\r\nimport logger from \"redux-logger\";\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport { createBrowserHistory, History } from \"history\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistStore, persistReducer, Persistor } from \"redux-persist\";\r\nimport { newMessageAlert } from \"../middlewares/newMessageAlert\";\r\nimport { botMiddware } from \"../middlewares/bot\";\r\n\r\nexport const history: History = createBrowserHistory();\r\n\r\nconst persistConfig = {\r\n    key: 'app',\r\n    storage,\r\n    blacklist: ['chats', 'profile', 'messages'],\r\n};\r\n\r\nexport const initStore = (): { store: Store, persistor: Persistor } => {\r\n    const initialStore = {};\r\n    const store: Store = createStore(\r\n        persistReducer(persistConfig, createRootReducer(history)),\r\n        initialStore,\r\n        composeWithDevTools(\r\n            applyMiddleware(routerMiddleware(history), apiMiddleware, logger,\r\n                botMiddware, newMessageAlert\r\n            )));\r\n    const persistor: Persistor = persistStore(store);\r\n    return { store, persistor };\r\n};","import { combineReducers } from \"redux\";\nimport { chatsReducer } from \"./chats\";\nimport { profileReducer } from \"./profile\";\nimport { messagesReducer } from \"./messages\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History } from \"history\";\n\ntype AppState = {\n    chats: InitialChatStateType;\n    profile: InitailProfileStateType;\n    messages: InitialMessagesType;\n    [propName: string]: any;\n};\n\nexport const createRootReducer = (history: History) => combineReducers<AppState>({\n    router: connectRouter(history),\n    chats: chatsReducer,\n    profile: profileReducer,\n    messages: messagesReducer,\n});\n\nexport type RootState = ReturnType<typeof createRootReducer>;","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { routes } from \"./routes\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { initStore, history } from \"./store\";\r\n\r\nexport const { store, persistor } = initStore();\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <PersistGate persistor={persistor}>\r\n            <ConnectedRouter history={history}>\r\n                <Switch>\r\n                    {routes.map((route, index) => (<Route key={index} {...route} />))}\r\n                </Switch>\r\n            </ConnectedRouter>\r\n        </PersistGate>\r\n    </Provider>\r\n    , document.getElementById(\"root\"));"],"sourceRoot":""}